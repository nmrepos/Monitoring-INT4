---
- name: Deploy rolldice application with OpenTelemetry
  hosts: localhost
  gather_facts: false
  vars:
    app_name: "rolldice"
    namespace: "default"
    
  tasks:
    - name: Create rolldice ConfigMap
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: rolldice-config
            namespace: default
          data:
            app.js: |
              const express = require('express');
              const { NodeSDK } = require('@opentelemetry/sdk-node');
              const { Resource } = require('@opentelemetry/resources');
              const { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');
              const { OTLPTraceExporter } = require('@opentelemetry/exporter-otlp-http');
              const { OTLPMetricExporter } = require('@opentelemetry/exporter-metrics-otlp-http');
              const { PeriodicExportingMetricReader } = require('@opentelemetry/sdk-metrics');
              const { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');

              // Configure OpenTelemetry
              const sdk = new NodeSDK({
                resource: new Resource({
                  [SemanticResourceAttributes.SERVICE_NAME]: 'rolldice-app',
                  [SemanticResourceAttributes.SERVICE_VERSION]: '1.0.0',
                  [SemanticResourceAttributes.DEPLOYMENT_ENVIRONMENT]: 'development'
                }),
                traceExporter: new OTLPTraceExporter({
                  url: process.env.OTEL_EXPORTER_OTLP_TRACES_ENDPOINT || 'http://signoz-k8s-infra-opentelemetry-collector.signoz-system.svc.cluster.local:4318/v1/traces',
                  headers: {}
                }),
                metricReader: new PeriodicExportingMetricReader({
                  exporter: new OTLPMetricExporter({
                    url: process.env.OTEL_EXPORTER_OTLP_METRICS_ENDPOINT || 'http://signoz-k8s-infra-opentelemetry-collector.signoz-system.svc.cluster.local:4318/v1/metrics',
                    headers: {}
                  }),
                  exportIntervalMillis: 5000
                }),
                instrumentations: [getNodeAutoInstrumentations()]
              });

              sdk.start();

              const app = express();
              const port = process.env.PORT || 8080;

              app.use(express.json());
              app.use(express.static('public'));

              // Serve the HTML page
              app.get('/', (req, res) => {
                res.send(`
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <title>OpenTelemetry Dice Roller</title>
                      <style>
                          body { font-family: Arial, sans-serif; max-width: 600px; margin: 50px auto; padding: 20px; }
                          .container { text-align: center; }
                          .dice { font-size: 72px; margin: 20px; }
                          button { font-size: 18px; padding: 10px 20px; margin: 10px; cursor: pointer; }
                          .result { font-size: 24px; margin: 20px; color: #333; }
                          .stats { margin: 20px; padding: 20px; background: #f5f5f5; border-radius: 8px; }
                      </style>
                  </head>
                  <body>
                      <div class="container">
                          <h1>🎲 OpenTelemetry Dice Roller</h1>
                          <div class="dice" id="dice">🎲</div>
                          <div class="result" id="result">Click the button to roll!</div>
                          <button onclick="rollDice()">Roll Dice</button>
                          <button onclick="rollMultiple()">Roll 5 Times</button>
                          <button onclick="getStats()">Get Statistics</button>
                          <div class="stats" id="stats"></div>
                      </div>
                      
                      <script>
                          async function rollDice() {
                              try {
                                  const response = await fetch('/api/roll', { method: 'POST' });
                                  const data = await response.json();
                                  document.getElementById('result').textContent = 'You rolled: ' + data.value;
                                  animateDice();
                              } catch (error) {
                                  console.error('Error:', error);
                                  document.getElementById('result').textContent = 'Error rolling dice';
                              }
                          }
                          
                          async function rollMultiple() {
                              document.getElementById('result').textContent = 'Rolling 5 times...';
                              const results = [];
                              for (let i = 0; i < 5; i++) {
                                  try {
                                      const response = await fetch('/api/roll', { method: 'POST' });
                                      const data = await response.json();
                                      results.push(data.value);
                                      await new Promise(resolve => setTimeout(resolve, 200));
                                  } catch (error) {
                                      console.error('Error:', error);
                                  }
                              }
                              document.getElementById('result').textContent = 'Rolls: ' + results.join(', ');
                          }
                          
                          async function getStats() {
                              try {
                                  const response = await fetch('/api/stats');
                                  const data = await response.json();
                                  document.getElementById('stats').innerHTML = \`
                                      <h3>Statistics</h3>
                                      <p>Total Rolls: \${data.totalRolls}</p>
                                      <p>Average: \${data.average.toFixed(2)}</p>
                                      <p>Distribution: \${JSON.stringify(data.distribution)}</p>
                                  \`;
                              } catch (error) {
                                  console.error('Error:', error);
                              }
                          }
                          
                          function animateDice() {
                              const dice = document.getElementById('dice');
                              const faces = ['⚀', '⚁', '⚂', '⚃', '⚄', '⚅'];
                              let i = 0;
                              const interval = setInterval(() => {
                                  dice.textContent = faces[Math.floor(Math.random() * 6)];
                                  i++;
                                  if (i > 10) {
                                      clearInterval(interval);
                                      dice.textContent = '🎲';
                                  }
                              }, 100);
                          }
                      </script>
                  </body>
                  </html>
                `);
              });

              // In-memory storage for demo purposes
              let rollHistory = [];

              // Roll dice endpoint
              app.post('/api/roll', (req, res) => {
                const value = Math.floor(Math.random() * 6) + 1;
                rollHistory.push({ value, timestamp: new Date() });
                
                // Keep only last 1000 rolls
                if (rollHistory.length > 1000) {
                  rollHistory = rollHistory.slice(-1000);
                }
                
                console.log(\`Rolled: \${value}\`);
                res.json({ value, message: \`You rolled a \${value}!\` });
              });

              // Statistics endpoint
              app.get('/api/stats', (req, res) => {
                const totalRolls = rollHistory.length;
                const average = totalRolls > 0 ? rollHistory.reduce((sum, roll) => sum + roll.value, 0) / totalRolls : 0;
                
                const distribution = {};
                for (let i = 1; i <= 6; i++) {
                  distribution[i] = rollHistory.filter(roll => roll.value === i).length;
                }
                
                res.json({
                  totalRolls,
                  average,
                  distribution
                });
              });

              // Health check endpoint
              app.get('/health', (req, res) => {
                res.json({ status: 'healthy', timestamp: new Date().toISOString() });
              });

              app.listen(port, () => {
                console.log(\`Dice roller app listening at http://localhost:\${port}\`);
              });

              // Graceful shutdown
              process.on('SIGTERM', () => {
                console.log('SIGTERM received, shutting down gracefully');
                sdk.shutdown().then(() => process.exit(0));
              });
            
            package.json: |
              {
                "name": "rolldice-otel",
                "version": "1.0.0",
                "description": "A simple dice rolling app with OpenTelemetry instrumentation",
                "main": "app.js",
                "scripts": {
                  "start": "node app.js"
                },
                "dependencies": {
                  "express": "^4.18.2",
                  "@opentelemetry/sdk-node": "^0.45.0",
                  "@opentelemetry/resources": "^1.18.0",
                  "@opentelemetry/semantic-conventions": "^1.18.0",
                  "@opentelemetry/exporter-otlp-http": "^0.45.0",
                  "@opentelemetry/exporter-metrics-otlp-http": "^0.45.0",
                  "@opentelemetry/sdk-metrics": "^1.18.0",
                  "@opentelemetry/auto-instrumentations-node": "^0.40.0"
                }
              }

    - name: Create rolldice deployment
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: rolldice-otel
            namespace: default
            labels:
              app: rolldice-otel
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: rolldice-otel
            template:
              metadata:
                labels:
                  app: rolldice-otel
                annotations:
                  prometheus.io/scrape: "true"
                  prometheus.io/port: "8080"
                  prometheus.io/path: "/metrics"
              spec:
                containers:
                - name: rolldice-otel
                  image: node:18-alpine
                  workingDir: /app
                  command: 
                    - /bin/sh
                    - -c
                    - |
                      npm install
                      npm start
                  ports:
                  - containerPort: 8080
                    name: http
                  env:
                  - name: PORT
                    value: "8080"
                  - name: OTEL_SERVICE_NAME
                    value: "rolldice-otel"
                  - name: OTEL_SERVICE_VERSION
                    value: "1.0.0"
                  - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
                    value: "http://signoz-k8s-infra-opentelemetry-collector.signoz-system.svc.cluster.local:4318/v1/traces"
                  - name: OTEL_EXPORTER_OTLP_METRICS_ENDPOINT
                    value: "http://signoz-k8s-infra-opentelemetry-collector.signoz-system.svc.cluster.local:4318/v1/metrics"
                  - name: OTEL_RESOURCE_ATTRIBUTES
                    value: "service.name=rolldice-otel,service.version=1.0.0,deployment.environment=development"
                  resources:
                    requests:
                      memory: "128Mi"
                      cpu: "100m"
                    limits:
                      memory: "256Mi"
                      cpu: "200m"
                  livenessProbe:
                    httpGet:
                      path: /health
                      port: 8080
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  readinessProbe:
                    httpGet:
                      path: /health
                      port: 8080
                    initialDelaySeconds: 5
                    periodSeconds: 5
                  volumeMounts:
                  - name: app-code
                    mountPath: /app
                volumes:
                - name: app-code
                  configMap:
                    name: rolldice-config

    - name: Create rolldice service
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: rolldice-otel-service
            namespace: default
            labels:
              app: rolldice-otel
          spec:
            selector:
              app: rolldice-otel
            ports:
            - port: 80
              targetPort: 8080
              protocol: TCP
              name: http
            type: NodePort

    - name: Create load generator CronJob
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: batch/v1
          kind: CronJob
          metadata:
            name: rolldice-load-generator
            namespace: default
          spec:
            schedule: "*/1 * * * *"  # Every minute
            jobTemplate:
              spec:
                template:
                  spec:
                    containers:
                    - name: load-generator
                      image: curlimages/curl:latest
                      command:
                      - /bin/sh
                      - -c
                      - |
                        echo "Starting load generation for rolldice app..."
                        
                        # Generate varied load patterns
                        for i in $(seq 1 20); do
                          # Roll dice multiple times
                          echo "Rolling dice (attempt $i)..."
                          curl -s -X POST http://rolldice-otel-service/api/roll || echo "Roll request $i failed"
                          
                          # Get stats occasionally
                          if [ $((i % 5)) -eq 0 ]; then
                            echo "Getting stats..."
                            curl -s http://rolldice-otel-service/api/stats || echo "Stats request failed"
                          fi
                          
                          # Health check
                          curl -s http://rolldice-otel-service/health || echo "Health check failed"
                          
                          # Random delay between requests
                          sleep $((RANDOM % 3 + 1))
                        done
                        
                        echo "Load generation completed"
                    restartPolicy: OnFailure
        
    - name: Wait for rolldice deployment to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: "rolldice-otel"
        namespace: "{{ namespace }}"
        wait_condition:
          type: Available
          status: "True"
        wait_timeout: 300
        
    - name: Get NodePort for rolldice service
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        name: "rolldice-otel-service"
        namespace: "{{ namespace }}"
      register: rolldice_service
      
    - name: Display application info
      ansible.builtin.debug:
        msg: |
          Rolldice OpenTelemetry application deployed successfully!
          
          Application: rolldice-otel (2 replicas)
          Service: rolldice-otel-service (NodePort)
          Load Generator: rolldice-load-generator (CronJob - runs every minute)
          
          The application includes:
          - Express.js web server with OpenTelemetry instrumentation
          - Dice rolling API endpoint (/api/roll)
          - Statistics endpoint (/api/stats)  
          - Health check endpoint (/health)
          - Interactive web UI at root path (/)
          
          NodePort: {{ rolldice_service.resources[0].spec.ports[0].nodePort if rolldice_service.resources else 'Not available' }}
          
          To access the application:
          1. Port forward: kubectl port-forward service/rolldice-otel-service 8080:80
          2. Visit: http://localhost:8080
          
          To check telemetry in SigNoz:
          1. Visit your SigNoz dashboard
          2. Look for 'rolldice-otel' service in traces and metrics
